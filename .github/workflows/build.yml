name: Build and Deploy Docker Images

on:
  push:
    branches: [main, develop/**]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 소스코드 가져오기(Checkout repository)
        uses: actions/checkout@v4

      - name: GitHub 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: backend(Spring boot 3) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: Frontend(React) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: MCP server(python) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./py-mcp-server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop')) && github.event_name == 'push'

    steps:
      - name: GitHub Actions Runner
        run: |
          cd /workspace

          # 프로젝트 이름 명시
          export COMPOSE_PROJECT_NAME=writemd

          # 기존 컨테이너 정리 (프로젝트 이름 포함)
          docker-compose -p writemd down --remove-orphans 2>/dev/null || true

          # 최신 이미지 pull
          docker-compose -p writemd pull

          # 프로젝트로 배포
          docker-compose -p writemd up -d
    - name: 이미지 정리
      run: |
        docker image prune -f
        
        docker image prune -a -f --filter "until=24h"