name: Build and Deploy Docker Images

on:
  push:
    branches: [main, develop/**]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 소스코드 가져오기(Checkout repository)
        uses: actions/checkout@v4

      - name: GitHub 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: backend(Spring boot 3) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: Frontend(React) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: MCP server(python) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./py-mcp-server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop')) && github.event_name == 'push'

    steps:
      - name: 시놀로지에서 직접 배포
        run: |
          echo "=== 현재 위치 ==="
          pwd

          echo "=== 현재 디렉토리 내용 ==="
          ls -la

          echo "=== 루트 디렉토리 ==="
          ls -la /

          echo "=== workspace 확인 ==="
          ls -la /workspace || echo "workspace 없음"

          # 작업 디렉토리로 이동
          cd /volume1/docker/writemd

          # 배포 시작 알림
          echo "🚀 배포 시작..."
          docker-compose ps

          # 최신 이미지 다운로드
          echo "📥 최신 이미지 다운로드 중..."
          docker-compose pull

          # 서비스 재시작 (다운타임 최소화)
          echo "🔄 서비스 업데이트 중..."
          docker-compose up -d --remove-orphans

          # 배포 완료 확인
          echo "✅ 배포 완료! 현재 상태:"
          docker-compose ps

          # 사용하지 않는 이미지 정리
          echo "🧹 미사용 이미지 정리..."
          docker image prune -f

          echo "🎉 배포가 성공적으로 완료되었습니다!"
