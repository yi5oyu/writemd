package com.writemd.backend.prompt;

import org.springframework.stereotype.Component;

@Component
public class GitHubPrompts {

    // 레포지토리 구조 분석 프롬프트 생성
    public String createRepoStructurePrompt(String owner, String repo, String branch, String token) {
        return String.format(
            "GitHub 레포지토리의 폴더 구조 분석\n" +
                "파일 내용은 분석하지 말고 파일과 디렉토리의 계층 구조를 트리 형태로 보여줘.\n\n" +
                "<owner>%s</owner>\n" +
                "<repository>%s</repository>\n" +
                "<branch>%s</branch>\n" +
                "<github_token>%s</github_token>\n\n"+
                "매우 중요한 지침:\n" +
                "1. 전체 폴더 구조를 도구로 가져와 프로젝트의 핵심만 담은 간략한 구조로 변환.\n" +
                "2. 루트 디렉토리와 루트 디렉토리 내의 모든 폴더/파일은 필수로 포함.\n" +
                "3. 다음 파일들은 생략:\n" +
                "   - 중요하지 않은 설정 파일\n" +
                "   - 숨김 파일\n" +
                "4. 트리 구조는 최대 40줄 이내로 제한, 너무 많은 항목이 있을 경우 중요도에 따라 선택.\n" +
                "5. 구조 표시 규칙:\n" +
                "   - 모든 디렉토리는 항상 파일보다 먼저 나열\n" +
                "   - 같은 디렉토리 내에서 모든 하위 디렉토리를 먼저 표시한 후 파일을 표시\n" +
                "   - 디렉토리 이름 뒤에는 반드시 '/' 표시를 붙일 것\n" +
                "   - 디렉토리끼리, 파일끼리 알파벳 순으로 정렬\n" +
                "6. 어떤 설명, 소개, 결론도 추가없이 오직 구조만 보여주고, 다음 형식으로 응답:\\n\\n```\\n[폴더 구조]\\n```..",
            owner, repo, branch, token
        );
    }

    // 레포지토리 전체 분석 프롬프트 생성
    public String createRepoAnalysisPrompt(String owner, String repo, String branch, String token) {
        return String.format(
            "GitHub 레포지토리 '%s/%s' 전체 심층 분석 요청입니다. 아래 항목별로 상세한 분석을 마크다운 형식으로 제공해주세요.\n\n" +
                "## 1. 분석 요약\n" +
                "- 레포지토리 개요 및 목적\n" +
                "- 사용된 프로그래밍 언어 및 분포\n" +
                "- 코드 라인 수와 전반적인 규모\n" +
                "- 최근 활동 및 유지보수 상태\n\n" +

                "## 2. 주요 특징 및 기능\n" +
                "- 제공하는 핵심 기능 설명\n" +
                "- 주요 사용자 시나리오\n" +
                "- 차별화된 기능 및 접근 방식\n\n" +

                "## 3. 기술 스택 분석\n" +
                "- 프레임워크 및 라이브러리\n" +
                "- 데이터베이스 및 저장소\n" +
                "- 외부 API 및 서비스 통합\n" +
                "- 빌드 도구 및 의존성 관리\n\n" +

                "## 4. 아키텍처 및 패턴\n" +
                "- 전체 아키텍처 구조\n" +
                "- 사용된 디자인 패턴\n" +
                "- 모듈화 및 계층화 접근 방식\n" +
                "- 코드 구성 및 구조적 특징\n\n" +

                "## 5. 파일/폴더 구조 시각화\n" +
                "- 주요 디렉토리 구조 트리 형식으로 표현\n" +
                "- 핵심 파일 및 디렉토리 용도 설명\n" +
                "- 구조적 특징 및 패턴 식별\n\n" +

                "## 6. 핵심 코드 분석\n" +
                "- 중요 알고리즘 및 로직 설명\n" +
                "- 주요 클래스 및 함수 역할 분석\n" +
                "- 코드 흐름 및 실행 경로 설명\n" +
                "- 병목 가능성이나 최적화 포인트 식별\n\n" +

                "## 7. 설정 및 환경\n" +
                "- 설정 파일 분석\n" +
                "- 환경 변수 및 배포 설정\n" +
                "- 개발, 테스트, 프로덕션 환경 차이\n\n" +

                "## 8. 코드 품질 및 테스트\n" +
                "- 코드 스타일 및 일관성\n" +
                "- 테스트 접근 방식 및 커버리지\n" +
                "- 오류 처리 및 로깅 전략\n\n" +

                "## 9. 보안 및 성능\n" +
                "- 보안 관련 구현 분석\n" +
                "- 성능 최적화 기법\n" +
                "- 잠재적 취약점 및 보안 위험\n" +
                "- 확장성 및 부하 처리 접근 방식\n\n" +

                "## 10. 개발 및 배포 워크플로우\n" +
                "- CI/CD 설정 및 자동화\n" +
                "- 브랜치 전략 및 릴리스 프로세스\n" +
                "- 문서화 수준 및 접근 방식\n\n" +

                "## 11. 결론 및 개선점\n" +
                "- 전반적인 코드 품질 평가\n" +
                "- 강점 및 장점 요약\n" +
                "- 잠재적 개선 영역 제안\n" +
                "- 확장 가능성 및 향후 발전 방향\n\n" +

                "<owner>%s</owner>\n" +
                "<repository>%s</repository>\n" +
                "<branch>%s</branch>\n" +
                "<github_token>%s</github_token>\n\n" +

                "분석 시 다음 지침을 따라주세요:\n" +
                "1. 각 섹션을 철저히 분석하고 구체적인 내용과 예시를 포함해주세요.\n" +
                "2. 가능한 한 코드베이스의 모든 중요한 측면을 다루되, 불필요한 세부 사항은 제외하세요.\n" +
                "3. 섹션마다 코드 예시가 있으면 이해하기 쉽게 포함해주세요.\n" +
                "4. 시각적 요소(트리 구조, 표 등)를 활용해 정보를 명확하게 제시해주세요.\n" +
                "5. 긍정적 측면과 개선 가능한 영역을 균형 있게 다루세요.",
            owner, repo, owner, repo, branch, token
        );
    }


    // 단일 파일 분석 프롬프트 생성
    public String createDocumentAnalysisPrompt(String content) {
        return String.format(
            "다음 문서를 분석하고 맞춤법, 문법, 내용에 대한 상세한 조언을 제공해줘.\n\n" +
                "다음 항목별로 분석:\n" +
                "1. 맞춤법 및 문법 오류: 발견된 모든 맞춤법과 문법 오류를 지적하고 올바른 표현을 제안.\n" +
                "2. 문장 구조 개선: 어색하거나 명확하지 않은 문장을 찾아 더 자연스럽고 명확한 표현으로 개선.\n" +
                "3. 내용 구성 및 논리성: 내용의 구성과 논리적 흐름을 평가하고 개선점을 제안.\n" +
                "4. 용어 사용 적절성: 부적절하거나 일관성 없는 용어 사용을 찾아 개선안을 제시.\n" +
                "5. 문서 전체 품질 평가: 전체적인 문서의 품질을 평가하고 종합적인 개선 방향을 제안.\n\n" +
                "각 항목별로 구체적인 예시와 함께 개선안을 제시, 발견된 문제점과 그에 대한 해결책을 명확히 구분해줘.\n\n" +
                "<document>\n%s\n</document>",
            content
        );
    }

}
