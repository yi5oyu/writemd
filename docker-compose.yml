services:
  db:
    image: mysql:8.0
    container_name: mysql-md
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: md
      MYSQL_USER: writemd
      MYSQL_PASSWORD: ${MYSQL_USER_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - '3307:3306'
    volumes:
      - mysql_md_data:/var/lib/mysql
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:latest
    container_name: redis-md
    ports:
      - '6380:6379'
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    volumes:
      - redis_md_data:/data
    networks:
      - app-network

  py-mcp-server:
    build:
      context: ./py-mcp-server
      dockerfile: Dockerfile
    container_name: py-mcp-server
    ports:
      - '9889:9889'
    environment:
      - HOST=0.0.0.0
      - PORT=9889
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-app
    ports:
      - '8888:8888'
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - MYSQL_PASSWORD=${MYSQL_USER_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - db
      - redis
      - py-mcp-server
    networks:
      - app-network
    # restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-app
    ports:
      - '5173:80'
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  mysql_md_data:
  redis_md_data:

networks:
  app-network:
    driver: bridge
