name: Build and Deploy Docker Images

on:
  push:
    branches: [main, develop/**]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 소스코드 가져오기(Checkout repository)
        uses: actions/checkout@v4

      - name: GitHub 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: backend(Spring boot 3) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: Frontend(React) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: MCP server(python) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./py-mcp-server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop')) && github.event_name == 'push'

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to NAS
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "SSH 연결 성공!"
          whoami
          pwd
          date

          sudo chmod 666 /var/run/docker.sock
          cd ${{ secrets.DOCKER_COMPOSE_PATH }}

          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker-compose pull
          docker-compose up -d --force-recreate
          docker-compose ps
          EOF

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 배포 성공 알림
        if: needs.deploy.result == 'success'
        run: |
          echo "WriteeMD 배포가 성공적으로 완료되었습니다!"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Site: https://www.writemd.space"

      - name: 배포 실패 알림
        if: needs.deploy.result == 'failure'
        run: |
          echo "WriteeMD 배포가 실패했습니다!"
          echo "GitHub Actions 로그를 확인해주세요."
