version: '3.8'
name: writemd

services:
  db:
    image: mysql:8.0
    container_name: mysql-md
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: md
      MYSQL_USER: yi5oyu
      MYSQL_PASSWORD: ${MYSQL_USER_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - '3307:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    # DSM 호환 라벨 추가
    labels:
      - 'com.synology.docker=true'
      - 'com.docker.compose.project=writemd'
      - 'com.docker.compose.service=db'
      - 'service.type=database'

  redis:
    image: redis:latest
    container_name: redis-md
    ports:
      - '6380:6379'
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - 'com.synology.docker=true'
      - 'com.docker.compose.project=writemd'
      - 'com.docker.compose.service=redis'
      - 'service.type=cache'

  py-mcp-server:
    image: ghcr.io/yi5oyu/writemd-py-mcp-server:latest
    container_name: py-mcp-server
    ports:
      - '9889:9889'
    environment:
      - HOST=0.0.0.0
      - PORT=9889
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - 'com.synology.docker=true'
      - 'com.docker.compose.project=writemd'
      - 'com.docker.compose.service=py-mcp-server'
      - 'service.type=api'

  backend:
    image: ghcr.io/yi5oyu/writemd-backend:latest
    container_name: backend-app
    ports:
      - '8888:8888'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MYSQL_PASSWORD=${MYSQL_USER_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_REDIRECT_URI=${GITHUB_REDIRECT_URI}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - db
      - redis
      - py-mcp-server
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - 'com.synology.docker=true'
      - 'com.docker.compose.project=writemd'
      - 'com.docker.compose.service=backend'
      - 'service.type=backend'

  frontend:
    image: ghcr.io/yi5oyu/writemd-frontend:latest
    container_name: frontend-app
    ports:
      - '5173:80'
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - 'com.synology.docker=true'
      - 'com.docker.compose.project=writemd'
      - 'com.docker.compose.service=frontend'
      - 'service.type=frontend'

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - app-network
    restart: unless-stopped
    labels:
      - 'com.synology.docker=true'
      - 'com.docker.compose.project=writemd'
      - 'com.docker.compose.service=cloudflared'
      - 'service.type=proxy'

volumes:
  mysql_data:
    labels:
      com.synology.docker: 'true'
      com.docker.compose.project: 'writemd'
      com.docker.compose.volume: 'mysql_data'
  redis_data:
    labels:
      com.synology.docker: 'true'
      com.docker.compose.project: 'writemd'
      com.docker.compose.volume: 'redis_data'

networks:
  app-network:
    driver: bridge
    labels:
      com.synology.docker: 'true'
      com.docker.compose.project: 'writemd'
      com.docker.compose.network: 'app-network'
