name: Build and Deploy Docker Images

on:
  push:
    branches: [main, develop/**]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 소스코드 가져오기(Checkout repository)
        uses: actions/checkout@v4

      - name: GitHub 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: backend(Spring boot 3) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: Frontend(React) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: MCP server(python) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./py-mcp-server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop')) && github.event_name == 'push'

    steps:
      - name: 시놀로지 NAS 자동 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 300s
          command_timeout: 600s
          script: |
            echo "배포 시작"
            cd ${{ secrets.DOCKER_COMPOSE_PATH }}

            echo "현재 상태 확인"
            docker-compose ps

            echo "최신 이미지 가져오기"
            docker-compose pull

            echo "새 이미지 적용"
            docker-compose up -d --force-recreate --remove-orphans

            echo "최종 상태 확인"
            docker-compose ps

            echo "이전 이미지 삭제"
            docker image prune -af

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 배포 성공 알림
        if: needs.deploy.result == 'success'
        run: |
          echo "WriteeMD 배포가 성공적으로 완료되었습니다!"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Site: https://www.writemd.space"

      - name: 배포 실패 알림
        if: needs.deploy.result == 'failure'
        run: |
          echo "WriteeMD 배포가 실패했습니다!"
          echo "GitHub Actions 로그를 확인해주세요."
