spring:
  application:
    name: backend
  mvc:
    async:
      request-timeout: 300000
  devtools:
    livereload:
      enabled: false
    restart:
      enabled: false # Docker에서는 비활성화

  # Docker 네트워크 내에서 연결 설정
  datasource:
    url: jdbc:mysql://db:3306/md?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: yi5oyu
    password: ${MYSQL_PASSWORD}

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false

  data:
    redis:
      host: redis # 컨테이너 이름으로 연결
      port: 6379 # 컨테이너 내부 포트
      password: ${REDIS_PASSWORD}

  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: ${GITHUB_REDIRECT_URI}
            scope: read:user, user:email, repo

  ai:
    mcp:
      client:
        toolcallback:
          enabled: true
        sse:
          connections:
            py-mcp-server:
              url: http://py-mcp-server:9889 # 컨테이너 이름으로 연결

management:
  endpoints:
    web:
      exposure:
        include: '*'
        exclude: 'info'
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
    metrics:
      enabled: true

  # Prometheus 메트릭 설정
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 100ms, 500ms, 1s
app:
  frontend:
    url: ${FRONTEND_URL}

server:
  port: 8888
  address: 0.0.0.0 # 외부 접근 허용
  tomcat:
    connection-timeout: 300000
  servlet:
    session:
      timeout: 30m

logging:
  level:
    org.springframework.ai: INFO
