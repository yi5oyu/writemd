name: Build and Deploy Docker Images

on:
  push:
    branches: [main, develop/**]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 소스코드 가져오기(Checkout repository)
        uses: actions/checkout@v4

      - name: GitHub 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: backend(Spring boot 3) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: Frontend(React) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: MCP server(python) 이미지 빌드/푸시
        uses: docker/build-push-action@v5
        with:
          context: ./py-mcp-server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-py-mcp-server:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop')) && github.event_name == 'push'

    steps:
      - name: 시놀로지 NAS 자동 배포 (상세 로그)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "========================================"
            echo "SSH 연결 성공! 배포 시작"
            echo "========================================"

            echo "=== 1단계: 환경 정보 확인 ==="
            echo "현재 사용자: $(whoami)"
            echo "현재 위치: $(pwd)"
            echo "현재 시간: $(date)"
            echo "HOME 디렉토리: $HOME"

            echo "=== 2단계: Docker 권한 수정 ==="
            echo "Docker 소켓 권한 (수정 전):"
            ls -la /var/run/docker.sock

            echo "권한 수정 실행..."
            sudo chmod 666 /var/run/docker.sock
            echo "권한 수정 결과: $?"

            echo "Docker 소켓 권한 (수정 후):"
            ls -la /var/run/docker.sock

            echo "=== 3단계: 디렉토리 이동 ==="
            echo "이동할 경로: ${{ secrets.DOCKER_COMPOSE_PATH }}"
            echo "경로 존재 여부 확인:"
            ls -la "${{ secrets.DOCKER_COMPOSE_PATH }}" || echo "경로 접근 실패!"

            echo "디렉토리 이동 시도..."
            cd "${{ secrets.DOCKER_COMPOSE_PATH }}"
            echo "이동 결과: $?"
            echo "현재 위치: $(pwd)"

            echo "현재 디렉토리 내용:"
            ls -la

            echo "=== 4단계: Docker Compose 파일 확인 ==="
            if [ -f "docker-compose.yml" ]; then
                echo "✅ docker-compose.yml 파일 존재"
                echo "파일 크기: $(ls -lh docker-compose.yml)"
                echo "파일 내용 (처음 20줄):"
                head -20 docker-compose.yml
            else
                echo "❌ docker-compose.yml 파일 없음!"
                exit 1
            fi

            echo "=== 5단계: 배포 전 현재 상태 ==="
            echo "현재 실행 중인 컨테이너:"
            docker-compose ps || echo "docker-compose ps 실패"

            echo "현재 Docker 이미지 (ghcr.io):"
            docker images | grep ghcr.io || echo "ghcr.io 이미지 없음"

            echo "=== 6단계: GitHub Container Registry 로그인 ==="
            echo "레지스트리 로그인 시도..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "로그인 결과: $?"

            echo "=== 7단계: 최신 이미지 가져오기 ==="
            echo "docker-compose pull 실행..."
            docker-compose pull
            echo "Pull 결과: $?"

            echo "Pull 후 이미지 상태:"
            docker images | grep ghcr.io || echo "이미지 확인 실패"

            echo "=== 8단계: 기존 컨테이너 중지 ==="
            echo "기존 컨테이너 중지..."
            docker-compose down
            echo "중지 결과: $?"

            echo "=== 9단계: 새 컨테이너 시작 ==="
            echo "새 컨테이너 시작..."
            docker-compose up -d --force-recreate --remove-orphans
            echo "시작 결과: $?"

            echo "=== 10단계: 배포 결과 확인 ==="
            echo "10초 대기 중..."
            sleep 10

            echo "최종 컨테이너 상태:"
            docker-compose ps

            echo "컨테이너 상세 정보:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

            echo "=== 11단계: 컨테이너 로그 확인 ==="
            echo "각 서비스 로그 (최근 5줄):"
            for service in $(docker-compose config --services); do
                echo "--- $service 로그 ---"
                docker-compose logs --tail=5 $service || echo "$service 로그 없음"
            done

            echo "=== 12단계: 이전 이미지 정리 ==="
            echo "이전 이미지 삭제..."
            docker image prune -af
            echo "정리 결과: $?"

            echo "========================================"
            echo "배포 완료!"
            echo "최종 시간: $(date)"
            echo "========================================"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 배포 성공 알림
        if: needs.deploy.result == 'success'
        run: |
          echo "WriteeMD 배포가 성공적으로 완료되었습니다!"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Site: https://www.writemd.space"

      - name: 배포 실패 알림
        if: needs.deploy.result == 'failure'
        run: |
          echo "WriteeMD 배포가 실패했습니다!"
          echo "GitHub Actions 로그를 확인해주세요."
